#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

typedef pair<int, int> pii;

pii operator+(pii a, pii b) {
  return pii(a.first + b.first, a.second + b.second);
}

int width;
int height;

int playerId;

bool inBounds(pii a) {
  return a.first >= 0 && a.first < width && a.second >= 0 && a.second < height;
}

const int DIM;

char grid[DIM][DIM];

bool inGroup[DIM][DIM];
double values[DIM][DIM];

double alpha = 0.8;

int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

vector<pii> groupCells;

#define ZERO_OUT(x) memset(&x, 0, sizeof(x))

struct Entity {
 public:
  string entityType;
  int id;
  pii position
  int param0;
  int param1;
  int param2;

  void read_in() {
    cin >> entityType >> id >> x >> y >> param0 >> param1 >> param2;
    cin.ignore();
  }
}

const int = sanityLossSpook;

/**
 * Survive the wrath of Kutulu
 * Coded fearlessly by JohnnyYuge & nmahoude (ok we might have been a bit scared
 *by the old god...but don't say anything)
 **/
int main() {


  for (int i=-2; i<=2; i++) {
    for (int j=-2; j<=2; j++) {
      if (i+j <= 2) {
        groupCells.push_back(pii(i,j));
      }
    }
  }

  cin >> width;
  cin.ignore();
  cin >> height;
  cin.ignore();

  for (int j = 0; j < height; j++) {
    for (int i = 0; i < width; i++) {
      cin >> grid[i][j];
    }
  }

  int sanityLossLonely;  // how much sanity you lose every turn when alone,
                         // always 3 until wood 1
  int sanityLossGroup;  // how much sanity you lose every turn when near another
                        // player, always 1 until wood 1
  int wandererSpawnTime;  // how many turns the wanderer take to spawn, always 3
                          // until wood 1
  int wandererLifeTime;   // how many turns the wanderer is on map after
                          // spawning, always 40 until wood 1
  cin >> sanityLossLonely >> sanityLossGroup >> wandererSpawnTime >>
      wandererLifeTime;
  cin.ignore();

  // game loop
  while (1) {
    int entityCount;  // the first given entity corresponds to your explorer
    cin >> entityCount;
    cin.ignore();
    bool got_correct = false;

    ZERO_OUT(inGroup);
    ZERO_OUT(values);

    vector<Entity> entities;
    for (int i = 0; i < entityCount; i++) {
      entities.emplace();
      entities.back().read_in();
    }

    player_id = entities[0].id;

    for (Entity &entity: entities) {
      if (entity.entityType == "EXPLORER" && entity.id != player_id) {
        for (pii p : groupCells) {
          if 



    for (int i=1; i<=width; i++) {
      for (int j=1; j<=height; j++) {

      }
    }

    cout << "MOVE " << xx << " " << yy << endl;  // MOVE <x> <y> | WAIT
  }
}
